q()
getwd()
dir()
getwd()
q()
install.packages("slidify")
install.packages("ggplot2")
install.packages("slidify")
clear
library(datasets)
data(iris)
?iris
iris
iris3
iris3$Virginica
iris3[Virginica]
iris3[[Virginica]]
iris$Sepal.Length
levels(iris[Species])
levels(iris$Species)
tapply(iris,levels(iris$Species),mean)
tapply(iris,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
library(datasets)
data(mtcars)
?mtcart
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl,mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))[8]-with(mtcars, tapply(hp, cyl, mean))[4]
with(mtcars, tapply(hp, cyl, mean))["8"]-with(mtcars, tapply(hp, cyl, mean))["4"]
with(mtcars, tapply(hp, cyl, average))
with(mtcars, tapply(hp, cyl, mean))["4"]-with(mtcars, tapply(hp, cyl, mean))["8"]
209.21429-26.66364
209.21429-82.63636
debug(ls)
ls()
x
q
x
?
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
?hist
install.packages(foreach)
install.packages("foreach")
dnorm(-5)
dnorm(5)
dnorm(-1000)
dnorm(-10)
?dt
install.packages("TDist")
vals <- times( k ) %do% mean( rexp(40, 0.2) )
library(foreach)
library(ggplot2)
library(stats)
vals <- times( k ) %do% mean( rexp(40, 0.2) )
k <- 1000
vals <- times( k ) %do% mean( rexp(40, 0.2) )
vals[1:10]
dt(vals[1],39)
dt(vals[1],40-1)
dt(vals[2],40-1)
dt(vals,39)[1:10]
ggplot(aes(x=dt(vals,39))) + geom_density(alpha=.3)
ggplot(x=dt(vals,39)) + geom_density(alpha=.3)
ggplot(dt(vals,39)) + geom_density(alpha=.3)
d <- data.frame(x = dt(vals,39))
ggplot(d, aes(x=x) + geom_density(alpha=.3)
ggplot(d, aes(x=x)) + geom_density(alpha=.3)
d <- data.frame(x = vals)
ggplot(d, aes(x=x)) + geom_density(alpha=.3)
(1/0.2)/sqrt(1000)
?qnorm
set.seed(1414)
k <- 1000
vals <- times( k ) %do% mean( rexp(40, 0.2) )
var_fact <- variance( vals )
var_fact <- var( vals )
var_theo <- (1/0.2)^2/40
df <- data.frame ( vals = vals )
ggplot(df, aes(x=vals)) +
geom_density(alpha=.2, fill="red") +
geom_vline(aes(xintercept=mean(vals, na.rm=T)),
color="red", linetype="dashed", size=1) +
stat_function(fun = dnorm, args=list(mean=5, sd=sqrt(val_theo))
)
library(datasets)
data(ToothGrowth)
head(ToothGrowth)
str(head(ToothGrowth))
ToothGrowth
ToothGrowth[ ToothGrowth[,2] ="VC"]
ToothGrowth[ ToothGrowth[,2] =="VC"]
ToothGrowth[ ToothGrowth[,2] =="VC", ]
ToothGrowth[ ToothGrowth[,2] =="OJ", ]
library(ggplot2)
library(stats)
library(datasets)
data(ToothGrowth)
head(ToothGrowth)
str(head(ToothGrowth))
set.seed(1414)
g1 <- ToothGrowth$dose[1 : 30]
g1
g2 <- sleep$extra[31 : 60]
g2
g2 <- ToothGrowth$dose[31 : 60]
g2
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 30
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
mn
difference
g1 <- ToothGrowth$len[1 : 30]
g2 <- ToothGrowth$len[31 : 60]
difference <- g2 - g1
mn <- mean(difference)
mn
s <- sd(difference)
n <- 30
s
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = ToothGrowth)
t.test(len ~ I(relevel(group, 2)), paired = TRUE, data = ToothGrowth)
t.test(len ~ I(relevel(supp, 2)), paired = TRUE, data = ToothGrowth)
t.test(len ~ I(relevel(dose, 2)), paired = TRUE, data = ToothGrowth)
t.test(I(relevel(supp, 2) ~ len), paired = TRUE, data = ToothGrowth)
t.test(len ~ I(relevel(supp, 2)), paired = TRUE, data = ToothGrowth)
difference
g1
g2
ToothGrowth$supp[1 : 30]
ToothGrowth$supp[31 : 60]
ToothGrowth
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
summary(fit)$coefficients
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
e<-y-beta0-beta1*x
sigma<-sqrt(sum(e^2)/(n-2))
n<-length(x)
sigma<-sqrt(sum(e^2)/(n-2))
sigma
library(UsingR)
data(mtcars)
str(mtcars)
y<-mtcars$mpg;x<-mtcars$wt;n<-length(y)
fit<-lm(y~x)
summary(fit)$coefficients
mean(x)
sumCoef<-summary(fit)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
fit2<-lm(y~I(x - mean(x))
)
fit2<-lm(y~I(x - mean(x)))
summary(fit2)$coefficients
sumCoef<-summary(fit2)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[2,2]
?mtcars
fit2<-lm(y~I(x - 3))
sumCoef<-summary(fit2)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[2,2]
y<-mtcars$mpg;x<-mtcars$wt;n<-length(y)
fit2<-lm(y~I(x - 3))
sumCoef<-summary(fit2)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[2,2]
fit1<-lm(y~x)
sumCoef<-summary(fit)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
sumCoef[1,1]+sumCoef[2,1]*3
(sumCoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2])+(sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2])*3
sumCoef[1,1]+sumCoef[2,1]*3+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
fit2<-lm(y~I(x - 3))
sumCoef<-summary(fit2)$coefficients
sumCoef
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[2,2]
21.251711+2*0.5519713
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[1,2]+3*sumCoef[2,1]
fit1<-lm(y~x)
sumCoef<-summary(fit)$coefficients
sumCoef
37.285126+3*(-5.344472)
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
37.285126+3*(-5.344472)+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
fit2<-lm(y~I(x - 3))
sumCoef<-summary(fit2)$coefficients
sumCoef
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[1,2]
fit2<-lm(y~I(x - 2))
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef[2,2]
y<-mtcars$mpg;x<-mtcars$wt;n<-length(y)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
e1<-y-beta0
e2<-y-beta0-beta1*x
sigma1<-sqrt(sum(e1^2)/(n-2))
sigma2<-sqrt(sum(e2^2)/(n-2))
sigma1/sigma2
sigma2/sigma1
sum(e1^2)/sum(e2^2)
sum(e2^2)/sum(e1^2)
e1
e2
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit1<-lm(y~x)
sumCoef<-summary(fit1)$coefficients
sumCoef
y<-mtcars$mpg;x<-mtcars$wt;n<-length(y)
fit1<-lm(y~x)
sumCoef<-summary(fit1)$coefficients
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit1$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit1$df)*sumCoef[2,2]
fit2<-lm(y~I(x - mean(x)))
sumCoef2<-summary(fit2)$coefficients
sumCoef2[1,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef2[1,2]
sumCoef2[2,1]+c(-1,1)*qt(.975,df=fit2$df)*sumCoef2[2,2]
y<-mtcars$mpg;x<-mtcars$wt/2;n<-length(y)
fit1<-lm(y~x)
sumCoef1<-summary(fit1)$coefficients
sumCoef1
sumCoef1[1,1]+c(-1,1)*qt(.975,df=fit1$df)*sumCoef1[1,2]
sumCoef1[2,1]+c(-1,1)*qt(.975,df=fit1$df)*sumCoef1[2,2]
?I
?knitr
??knitr
testingfileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testingDestfilename <- "pml-testing.csv"
if ( !file.exists( testingDestfilename ) ) {
download.file(testingfileUrl, testingDestfilename, method="curl")
dateDownloaded <- Sys.Date()
}
getwd()
setwd("/Users/Igor/BigData/Coursera/_PublicFolder/datasciencecoursera/08 Practical Machine Learning")
getwd()
if ( !file.exists( testingDestfilename ) ) {
download.file(testingfileUrl, testingDestfilename, method="curl")
dateDownloaded <- Sys.Date()
}
testing <- read.csv(testingDestfilename, header=TRUE)
testing
testing_new <- read.csv("pml-testing_new.csv", header=TRUE)
getwd()
predictedDestfilename <- "pml-testing_new.csv"
trainingFileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainingDestfilename <- "pml-training.csv"
if ( !file.exists( trainingDestfilename ) ) {
download.file(trainingFileUrl, trainingDestfilename, method="curl")
dateDownloaded <- Sys.Date()
}
## loading dataset
training <- read.csv(trainingDestfilename, header=TRUE)
## preprocessing dataset
## select the columns to work with
myrows <- c("roll_belt", "pitch_belt", "yaw_belt",
"roll_arm", "pitch_arm", "yaw_arm",
"roll_dumbbell","pitch_dumbbell","yaw_dumbbell",
"classe")
training <- training[,myrows]
library(caret)
inTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
mytraining <- training[inTrain, ] ## in sample
mytesting <- training[-inTrain, ] ## out of sample
modFit <- train(classe ~ ., method="gbm", data=mytraining)
confusionMatrix(predict(modFit, mytraining), mytraining$classe)$overall["Accuracy"]
confusionMatrix(predict(modFit, mytesting), mytesting$classe)$overall["Accuracy"]
testingfileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testingDestfilename <- "pml-testing.csv"
if ( !file.exists( testingDestfilename ) ) {
download.file(testingfileUrl, testingDestfilename, method="curl")
dateDownloaded <- Sys.Date()
}
testing <- read.csv(testingDestfilename, header=TRUE)
testing$classe <- predict(modFit, testing[,myrows[-10]]) ## the source doesn't contain "classe" column
testing$classe
answers <- as.chracter(testing$classe)
answers <- as.character(testing$classe)
answers
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
modFit <- train(classe ~ ., method="gbm", data=mytraining)
confusionMatrix(predict(modFit, mytesting), mytesting$classe)$overall["Accuracy"]
confusionMatrix(predict(modFit, mytraining), mytraining$classe)$overall["Accuracy"]
testing$classe <- predict(modFit, testing[,myrows[-10]]) ## the source doesn't contain "classe" column
answers <- as.character(testing$classe)
answers
pml_write_files(answers)
modFit <- train(classe ~ ., method="gbm", data=mytraining)
confusionMatrix(predict(modFit, mytesting), mytesting$classe)$overall["Accuracy"]
confusionMatrix(predict(modFit, mytraining), mytraining$classe)$overall["Accuracy"]
testing$classe <- predict(modFit, testing[,myrows[-10]]) ## the source doesn't contain "classe" column
answers <- as.character(testing$classe)
answers
pml_write_files(answers)
libray(shiny)
library(shiny)
setwd("/Users/Igor/BigData/Coursera/_PublicFolder/datasciencecoursera/09 Developing Data Products/09DDP_PA1")
getwd()
runApp()
runApp()
runApp()
runApp()
?options
Sys.setenv("LANGUAGE"="En")
runApp()
weekdays(as.Date("2014-07-21"))
Sys.setenv("LANGUAGE"="En")
weekdays(as.Date("2014-07-21"))
Sys.setlocale("LC_TIME", "en_US")
weekdays(as.Date("2014-07-21"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
93/(1.86*1.86)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
